// Code generated by MockGen. DO NOT EDIT.
// Source: db/repository/repository.go

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	repository "github.com/gadhittana01/cosmos-validation-tracking/db/repository"
	utils "github.com/gadhittana01/cosmos-validation-tracking/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	v5 "github.com/jackc/pgx/v5"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateDailyAggregate mocks base method.
func (m *MockRepository) CreateDailyAggregate(ctx context.Context, arg repository.CreateDailyAggregateParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDailyAggregate", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDailyAggregate indicates an expected call of CreateDailyAggregate.
func (mr *MockRepositoryMockRecorder) CreateDailyAggregate(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDailyAggregate", reflect.TypeOf((*MockRepository)(nil).CreateDailyAggregate), ctx, arg)
}

// CreateDelegationSnapshot mocks base method.
func (m *MockRepository) CreateDelegationSnapshot(ctx context.Context, arg repository.CreateDelegationSnapshotParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelegationSnapshot", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelegationSnapshot indicates an expected call of CreateDelegationSnapshot.
func (mr *MockRepositoryMockRecorder) CreateDelegationSnapshot(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelegationSnapshot", reflect.TypeOf((*MockRepository)(nil).CreateDelegationSnapshot), ctx, arg)
}

// GetCountDailyAggregateByValidator mocks base method.
func (m *MockRepository) GetCountDailyAggregateByValidator(ctx context.Context, validatorAddress string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountDailyAggregateByValidator", ctx, validatorAddress)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountDailyAggregateByValidator indicates an expected call of GetCountDailyAggregateByValidator.
func (mr *MockRepositoryMockRecorder) GetCountDailyAggregateByValidator(ctx, validatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountDailyAggregateByValidator", reflect.TypeOf((*MockRepository)(nil).GetCountDailyAggregateByValidator), ctx, validatorAddress)
}

// GetCountDelegationSnapshotByValidator mocks base method.
func (m *MockRepository) GetCountDelegationSnapshotByValidator(ctx context.Context, validatorAddress string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountDelegationSnapshotByValidator", ctx, validatorAddress)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountDelegationSnapshotByValidator indicates an expected call of GetCountDelegationSnapshotByValidator.
func (mr *MockRepositoryMockRecorder) GetCountDelegationSnapshotByValidator(ctx, validatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountDelegationSnapshotByValidator", reflect.TypeOf((*MockRepository)(nil).GetCountDelegationSnapshotByValidator), ctx, validatorAddress)
}

// GetCountDelegatorHistoryByValidator mocks base method.
func (m *MockRepository) GetCountDelegatorHistoryByValidator(ctx context.Context, arg repository.GetCountDelegatorHistoryByValidatorParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountDelegatorHistoryByValidator", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountDelegatorHistoryByValidator indicates an expected call of GetCountDelegatorHistoryByValidator.
func (mr *MockRepositoryMockRecorder) GetCountDelegatorHistoryByValidator(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountDelegatorHistoryByValidator", reflect.TypeOf((*MockRepository)(nil).GetCountDelegatorHistoryByValidator), ctx, arg)
}

// GetDB mocks base method.
func (m *MockRepository) GetDB() utils.PGXPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(utils.PGXPool)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockRepositoryMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockRepository)(nil).GetDB))
}

// GetDailyAggregateByValidator mocks base method.
func (m *MockRepository) GetDailyAggregateByValidator(ctx context.Context, arg repository.GetDailyAggregateByValidatorParams) ([]repository.GetDailyAggregateByValidatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyAggregateByValidator", ctx, arg)
	ret0, _ := ret[0].([]repository.GetDailyAggregateByValidatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyAggregateByValidator indicates an expected call of GetDailyAggregateByValidator.
func (mr *MockRepositoryMockRecorder) GetDailyAggregateByValidator(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyAggregateByValidator", reflect.TypeOf((*MockRepository)(nil).GetDailyAggregateByValidator), ctx, arg)
}

// GetDelegationSnapshotByValidator mocks base method.
func (m *MockRepository) GetDelegationSnapshotByValidator(ctx context.Context, arg repository.GetDelegationSnapshotByValidatorParams) ([]repository.GetDelegationSnapshotByValidatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationSnapshotByValidator", ctx, arg)
	ret0, _ := ret[0].([]repository.GetDelegationSnapshotByValidatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationSnapshotByValidator indicates an expected call of GetDelegationSnapshotByValidator.
func (mr *MockRepositoryMockRecorder) GetDelegationSnapshotByValidator(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationSnapshotByValidator", reflect.TypeOf((*MockRepository)(nil).GetDelegationSnapshotByValidator), ctx, arg)
}

// GetDelegationSnapshotByValidatorAndDelegator mocks base method.
func (m *MockRepository) GetDelegationSnapshotByValidatorAndDelegator(ctx context.Context, arg repository.GetDelegationSnapshotByValidatorAndDelegatorParams) (repository.GetDelegationSnapshotByValidatorAndDelegatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationSnapshotByValidatorAndDelegator", ctx, arg)
	ret0, _ := ret[0].(repository.GetDelegationSnapshotByValidatorAndDelegatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationSnapshotByValidatorAndDelegator indicates an expected call of GetDelegationSnapshotByValidatorAndDelegator.
func (mr *MockRepositoryMockRecorder) GetDelegationSnapshotByValidatorAndDelegator(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationSnapshotByValidatorAndDelegator", reflect.TypeOf((*MockRepository)(nil).GetDelegationSnapshotByValidatorAndDelegator), ctx, arg)
}

// GetDelegatorHistoryByValidator mocks base method.
func (m *MockRepository) GetDelegatorHistoryByValidator(ctx context.Context, arg repository.GetDelegatorHistoryByValidatorParams) ([]repository.GetDelegatorHistoryByValidatorRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegatorHistoryByValidator", ctx, arg)
	ret0, _ := ret[0].([]repository.GetDelegatorHistoryByValidatorRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegatorHistoryByValidator indicates an expected call of GetDelegatorHistoryByValidator.
func (mr *MockRepositoryMockRecorder) GetDelegatorHistoryByValidator(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegatorHistoryByValidator", reflect.TypeOf((*MockRepository)(nil).GetDelegatorHistoryByValidator), ctx, arg)
}

// GetLatestDelegationSnapshot mocks base method.
func (m *MockRepository) GetLatestDelegationSnapshot(ctx context.Context) ([]repository.GetLatestDelegationSnapshotRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDelegationSnapshot", ctx)
	ret0, _ := ret[0].([]repository.GetLatestDelegationSnapshotRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDelegationSnapshot indicates an expected call of GetLatestDelegationSnapshot.
func (mr *MockRepositoryMockRecorder) GetLatestDelegationSnapshot(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDelegationSnapshot", reflect.TypeOf((*MockRepository)(nil).GetLatestDelegationSnapshot), ctx)
}

// WithTx mocks base method.
func (m *MockRepository) WithTx(tx v5.Tx) repository.Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(repository.Querier)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockRepositoryMockRecorder) WithTx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockRepository)(nil).WithTx), tx)
}
