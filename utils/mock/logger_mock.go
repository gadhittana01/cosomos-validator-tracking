// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/logger.go

// Package mockutl is a generated GoMock package.
package mockutl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockLoggerSvc is a mock of LoggerSvc interface.
type MockLoggerSvc struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerSvcMockRecorder
}

// MockLoggerSvcMockRecorder is the mock recorder for MockLoggerSvc.
type MockLoggerSvcMockRecorder struct {
	mock *MockLoggerSvc
}

// NewMockLoggerSvc creates a new mock instance.
func NewMockLoggerSvc(ctrl *gomock.Controller) *MockLoggerSvc {
	mock := &MockLoggerSvc{ctrl: ctrl}
	mock.recorder = &MockLoggerSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerSvc) EXPECT() *MockLoggerSvcMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerSvc) Debug(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerSvcMockRecorder) Debug(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerSvc)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerSvc) Error(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerSvcMockRecorder) Error(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerSvc)(nil).Error), varargs...)
}

// Fatal mocks base method.
func (m *MockLoggerSvc) Fatal(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerSvcMockRecorder) Fatal(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLoggerSvc)(nil).Fatal), varargs...)
}

// Info mocks base method.
func (m *MockLoggerSvc) Info(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerSvcMockRecorder) Info(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerSvc)(nil).Info), varargs...)
}

// Panic mocks base method.
func (m *MockLoggerSvc) Panic(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerSvcMockRecorder) Panic(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLoggerSvc)(nil).Panic), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerSvc) Warn(message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerSvcMockRecorder) Warn(message interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerSvc)(nil).Warn), varargs...)
}
